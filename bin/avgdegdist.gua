#!/usr/local/bin/guash
#
# avgdegdist.gua
#
#     This script calculate the average degree distribution from a set of degree
#     distribution files.
#
# Copyright (C) 2011 Roberto Luiz Souza Monteiro.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# RCS: @(#) $Id: avgdegdist.gua,v 1.0 2012/02/16 09:33:00 monteiro Exp $
#

#
# Configuration variables.
#
input_file = "noname"
average_file = "average.csv"
deviation_file = "deviation.csv"
log_file = "noname"
prefix = "sample"
nfiles = 1
index_from = 1
index_to = 1
index_in = 1
separator = " "

#
# Main program.
#
if (argc < 3) {
    println("Usage: avgdegdist option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: avgdegdist option1 value1 [option1 value1]")
        println("-h    --help         show the options sumary")
        println("-l                   log file")
        println("      --oavg         average output file")
        println("      --odev         deviation output file")
        println("      --prefix       prefix for multiple file creation(default=\"sample\")")
        println("      --nfiles       number of files for multiple file creation")
        println("      --from         first file index for multiple file creation")
        println("      --to           last file index for multiple file creation")
        println("      --in           total number of files in the file set")
        println("      --separator    column separator(default=\" \")")
        
        exit(0)
    } elseif (argv[i] == "-l") {
        i = i + 1
        log_file = argv[i]
    } elseif (argv[i] == "--oavg") {
        i = i + 1
        average_file = argv[i]
    } elseif (argv[i] == "--odev") {
        i = i + 1
        deviation_file = argv[i]
    } elseif (argv[i] == "--prefix") {
        i = i + 1
        prefix = argv[i]
    } elseif (argv[i] == "--nfiles") {
        i = i + 1
        nfiles = eval(argv[i])
    } elseif (argv[i] == "--from") {
        i = i + 1
        index_from = eval(argv[i])
    } elseif (argv[i] == "--to") {
        i = i + 1
        index_to = eval(argv[i])
    } elseif (argv[i] == "--in") {
        i = i + 1
        index_in = eval(argv[i])
    } elseif (argv[i] == "--separator") {
        i = i + 1
        separator = argv[i]
    }
    i = i + 1
} 

# Get the current time...
t1 = time();

# Create the log file...
if (log_file != "noname") {
    fl = fopen(log_file, "w")
}

# Calculate the file index number range...
if (index_from < 1) {
    index_from = 1
}
if (index_to <= 1) {
    if (nfiles > 1) {
        index_to = index_from + nfiles - 1
    }
}
nfiles = index_to - index_from + 1
if (index_in <= 1) {
    index_in = nfiles
}

println("Processing " + nfiles + " files...\n")

# Start file processing...
for (nf = index_from; nf <= index_to; nf = nf + 1) {
    # Get the current time...
    ts1 = time();
    
    if (nfiles > 1) {
        input_file = prefix + "-" + sprintf("%0" + length(toString(index_in)) + "." + length(toString(index_in)) + "d", nf) + ".csv"
    }
    
    println("Processing file " + input_file + "...")
    
    fp = fopen(input_file, "r")
    
    while (!feof(fp)) {
        if ((line = fgets(fp)) == NULL) {
            break
        }
        
        if (separator != " ") {
            record = split(trim(line, " \t\n"), separator)
        } else {
            record = split(trim(line, " \t\n"))
        }
        
        cluster = eval(record[0])
        x = eval(record[1])
        
        try {
            fsx[cluster] = fsx[cluster] + x
            fsx2[cluster] = fsx2[cluster] + x * x
            fn[cluster] = fn[cluster] + 1
        } catch {
            fsx[cluster] = x
            fsx2[cluster] = x * x
            fn[cluster] = 1
        }
    }
    
    fp = fclose(fp)
    
    # Get the current time...
    ts2 = time();
    
    # Show the elapsed time...
    printf("Elapsed time to process this file: %.3f seconds\n\n", ts2 - ts1)
    
    # Log the elapsed time...
    if (log_file != "noname") {
        fputs(sprintf("%d\t%.3f\n", nf, ts2 - ts1), fl)
    }
}

# Close the log file...
if (log_file != "noname") {
    fclose(fl)
}

mavg = matrix(0, length(fn), 2)
mdev = matrix(0, length(fn), 2)

# Calculate the averages and deviations...
i = 0
foreach (fn; cluster; n) {
    mavg[i, 0] = cluster
    mavg[i, 1] = fsx[cluster] / fn[cluster]
    
    mdev[i, 0] = cluster
    if (fn[cluster] > 1) {
        mdev[i, 1] = sqrt((fsx2[cluster] - (fsx[cluster] * fsx[cluster]) / fn[cluster]) / (fn[cluster] - 1))
    }
    
    i = i + 1
}

# Sort data...
dim_i = length(fn)

for (i = 0; i < dim_i - 1; i = i + 1) {
    for (j = i; j < dim_i; j = j + 1) {
        if (mavg[i, 0] > mavg[j, 0]) {
            cluster = mavg[i, 0]
            mavg[i, 0] = mavg[j, 0]
            mavg[j, 0] = cluster
            
            frequency = mavg[i, 1]
            mavg[i, 1] = mavg[j, 1]
            mavg[j, 1] = frequency
            
            cluster = mdev[i, 0]
            mdev[i, 0] = mdev[j, 0]
            mdev[j, 0] = cluster
            
            deviation = mdev[i, 1]
            mdev[i, 1] = mdev[j, 1]
            mdev[j, 1] = deviation
        }
    }
}

fa = fopen(average_file, "w")
fd = fopen(deviation_file, "w")

# Save the averages and deviations...
for (i = 0; i < dim_i; i = i + 1) {
    fputs(toString(mavg[i, 0]) + separator + toString(mavg[i, 1]) + "\n", fa)
    fputs(toString(mdev[i, 0]) + separator + toString(mdev[i, 1]) + "\n", fd)
}

fclose(fa)
fclose(fd)

# Get the current time...
t2 = time();

# Show the elapsed time...
printf("Elapsed time to process %d files: %.3f seconds\n\n", nfiles, t2 - t1)

