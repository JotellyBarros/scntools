#!/usr/local/bin/guash
#
# cndisco.gua
#
#     This script remove network vertices.
#
# Copyright (C) 2011 Roberto Luiz Souza Monteiro.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# RCS: @(#) $Id: cndisco.gua,v 1.7 2012/01/27 20:56:00 monteiro Exp $
#

function CNA_SaveFile(filename, adj, type = "edges") {
    dim_adj = dim(adj)
    dim_i = dim_adj[0]
    dim_j = dim_adj[1]

    # Each line in a Pajek files must terminate with CR+LF.
    # Windows will automaticly converts "\n" to "\r\n", but
    # Linux will not.
    if ($SYS_HOST == "linux") {
        new_line = "\r\n"
    } else {
        new_line = "\n"
    }

    fp = fopen(filename, "w")

    # Save vertices...
    fputs("*Vertices " + (dim_i - 1) + new_line, fp)
    for (i = 1; i < dim_i; i = i + 1) {
        fputs(i + " \"" + adj[i, 0] + "\"" + new_line, fp)
    }

    # Save edges...
    if (type == "edges") {
        fputs("*Edges" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                if (adj[i, j] != 0) {
                    fputs(i + " " + j + " " + adj[i, j] + new_line, fp)
                }
            }
        }
    # Save arcs...
    } elseif (type == "arcs") {
        fputs("*Arcs" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                if (adj[i, j] != 0) {
                    fputs(i + " " + j + " " + adj[i, j] + new_line, fp)
                }
            }
        }
    # Save matrix...
    } elseif (type == "matrix") {
        fputs("*Matrix" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                fputs(" " + adj[i, j], fp)
            }
            fputs(new_line, fp)
        }
    }

    fp = fclose(fp)
}

function CNA_LoadFile(file_name) {
    fp = fopen(file_name, "r")

    file_section = "none"

    while (!feof(fp)) {
        if((line = fgets(fp)) == NULL) { 
            break
        }

        #record = split(trim(line, " \t\r\n"), " \t")
        record = split(trim(line, " \t\r\n"))

        if ((tolower(record[0]) == "*vertices") || (tolower(record[0]) == "*edges") || (tolower(record[0]) == "*arcs") || (tolower(record[0]) == "*matrix")) {
            file_section = tolower(record[0])
            if (file_section == "*vertices") {
                n = eval(record[1]) + 1
                adj = matrix(0, n, n)
            }
            i = 0
            continue
        }

        if (file_section == "*vertices") {
            adj[0, i + 1] = eval(record[1])
            adj[i + 1, 0] = eval(record[1])
            i = i + 1
        } elseif (file_section == "*edges") {
            i = eval(record[0])
            j = eval(record[1])
            if (length(record) == 2) {
                adj[i, j] = 1
                adj[j, i] = 1
            } else {
                adj[i, j] = eval(record[2])
                adj[j, i] = eval(record[2])
            }
        } elseif (file_section == "*arcs") {
            i = eval(record[0])
            j = eval(record[1])
            if (length(record) == 2) {
                adj[i, j] = 1
            } else {
                adj[i, j] = eval(record[2])
            }
        } elseif (file_section == "*matrix") {
            foreach(record; j; v) {
                adj[i + 1, j + 1] = eval(v)
                if (i == n) {
                    break
                }
            }
            i = i + 1
        }
    }

    fp = fclose(fp)

    return(adj)
}

function CNA_Degrees(adj, directed = FALSE) {
    dim_edges = dim(adj)
    dim_i = dim_edges[0]
    dim_j = dim_edges[1]

    degrees = matrix(0, dim_i, 3)
    
    for (i = 1; i < dim_i; i = i + 1) {
        degrees[i, 0] = count(adj, i, 1, i, dim_j - 1)
        degrees[i, 1] = count(adj, 1, i, dim_i - 1, i)
        if (!directed) {
            degrees[i, 2] = degrees[i, 0]
        } else {
            degrees[i, 2] = degrees[i, 0] + degrees[i, 1]
        }
    }

    return(degrees)
}

function CNA_DegreeDistribution(degrees) {
    dim_degrees = dim(degrees)
    dim_i = dim_degrees[0]
    dim_j = dim_degrees[1]

    for (i = 1; i < dim_i; i = i + 1) {
        degree = degrees[i, 2]

        try {
            if (search(keys(degdist), degree) == NULL) {
                degdist[degree] = 1
            } else {
                degdist[degree] = degdist[degree] + 1
			}
        } catch {
                degdist[degree] = 1
        }
    }

    hist = matrix(0, length(degdist), 3)
    
    i = 0
    foreach(degdist; deg; dist) {
        hist[i, 0] = deg
        hist[i, 1] = dist
		i = i + 1
    }

    dim_hist = dim(hist)

    sumdegs = sum(hist, 0, 1, dim_hist[0] - 1, 1)

    for (i = 0; i < dim_hist[0]; i = i + 1) {
        hist[i, 2] = (hist[i, 1] / sumdegs) * 100
    }

	return(hist)
}

function CNA_AverageDegree(hist) {
    dim_deg = dim(degrees)
    dim_i = dim_deg[0]
    dim_j = dim_deg[1]

    avgdeg = avg(degrees, 1, 2, (dim_i - 1), 2)

    return(avgdeg)
}

function CNA_Labels(adj) {
    dim_adj = dim(adj)
    dim_i = dim_adj[0]

    for (i = 1; i < dim_i; i = i + 1) {
        labels[i] = adj[i, 0]
    }

    return(labels)
}

#
# Configuration variables.
#
input_file = "noname"
output_file = "output.net"
output_file_type = "edges"
log_file = "noname"
report_file = "output.rep"
prefix = "sample"
nfiles = 1
index_from = 1
index_to = 1
index_in = 1
pdecrease = TRUE
dhubs = FALSE
drandom = FALSE
tseed = FALSE
trandom = 0
trandom_step = 0
pdecrease = TRUE

#
# Main program.
#
if (argc < 3) {
    println("Usage: cndisco option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: cndisco option1 value1 [option1 value1]")
        println("-h    --help      show the options sumary")
        println("-i                input file")
        println("-o                output file")
        println("-t                output file type(default=edges)")
        println("-l                log file")
        println("-r                report file")
        println("      --prefix    prefix for multiple file creation(default=\"sample\")")
        println("      --nfiles    number of files for multiple file creation")
        println("      --from      first file index for multiple file creation")
        println("      --to        last file index for multiple file creation")
        println("      --in        total number of files in the file set")
        println("      --hubs      hubs deletion")
        println("      --random    random node/link deletion")
        println("      --tseed     use the time as seed to random number generation")
        println("      --tax       tax for random node/link deletion")
        println("      --step      tax increment step(default=0)")
        println("      --pd        population decrease mode(default)")
        println("      --rd        relationship decrease mode")
        exit(0)
    } elseif (argv[i] == "-i") {
        i = i + 1
        input_file = argv[i]
    } elseif (argv[i] == "-o") {
        i = i + 1
        output_file = argv[i]
    } elseif (argv[i] == "-t") {
        i = i + 1
        output_file_type = argv[i]
    } elseif (argv[i] == "-l") {
        i = i + 1
        log_file = argv[i]
    } elseif (argv[i] == "-r") {
        i = i + 1
        report_file = argv[i]
    } elseif (argv[i] == "--prefix") {
        i = i + 1
        prefix = argv[i]
    } elseif (argv[i] == "--nfiles") {
        i = i + 1
        nfiles = eval(argv[i])
    } elseif (argv[i] == "--from") {
        i = i + 1
        index_from = eval(argv[i])
    } elseif (argv[i] == "--to") {
        i = i + 1
        index_to = eval(argv[i])
    } elseif (argv[i] == "--in") {
        i = i + 1
        index_in = eval(argv[i])
    } elseif (argv[i] == "--hubs") {
        dhubs = TRUE
    } elseif (argv[i] == "--random") {
        drandom = TRUE
    } elseif (argv[i] == "--tseed") {
        tseed = TRUE
    } elseif (argv[i] == "--tax") {
        i = i + 1
        trandom = eval(argv[i])
    } elseif (argv[i] == "--step") {
        i = i + 1
        trandom_step = eval(argv[i])
    } elseif (argv[i] == "--pd") {
        pdecrease = TRUE
    } elseif (argv[i] == "--rd") {
        pdecrease = FALSE
    }
    i = i + 1
} 

# Check if the input file name was suplied.
if (input_file == "noname") {
    println("Error: input file name is mandatory.")
    exit(1)
}

# Get the current time...
t1 = time();

# Create the log file...
if (log_file != "noname") {
    fl = fopen(log_file, "w")
}

# Calculate the file index number range...
if (index_from < 1) {
    index_from = 1
}
if (index_to <= 1) {
    if (nfiles > 1) {
        index_to = index_from + nfiles - 1
    }
}
nfiles = index_to - index_from + 1
if (index_in <= 1) {
    index_in = nfiles
}

println("Processing " + nfiles + " files...\n")

if (dhubs) {
    println("Removing hubs...\n")
}
if (drandom) {
    if (pdecrease) {
        println("Removing " + (trandom * 100) + "% of nodes...\n")
    } else {
        println("Removing " + (trandom * 100) + "% of links...\n")
    }
}

# Start file creation...
for (nf = index_from; nf <= index_to; nf = nf + 1) {
    println("Generating sample " + nf + "...")
    
    # Get the current time...
    ts1 = time();
    
    # Load the network file...
    adj = CNA_LoadFile(input_file)
    
    dim_adj = dim(adj)
    dim_i = dim_adj[0]
    dim_j = dim_adj[1]
    
    n = dim_i
    
    # Calculate vertex degrees...
    degrees = CNA_Degrees(adj)

    # Calculate vertex degrees...
    hist = CNA_Degrees(adj)

    # Calculate average degree...
    avgdeg = CNA_AverageDegree(hist)
    
    if (nfiles > 1) {
        output_file = prefix + "-" + sprintf("%0" + length(toString(index_in)) + "." + length(toString(index_in)) + "d", nf) + ".net"
        report_file = prefix + "-" + sprintf("%0" + length(toString(index_in)) + "." + length(toString(index_in)) + "d", nf) + ".log"
    }
    
    if (tseed) {
        srandom(time)
    } else {
        srandom(nf)
    }
    
    # Create the report file...
    fr = fopen(report_file, "w")

    # Population decrease mode...
    if (pdecrease) {
        # Get the vertices labels...
        labels = CNA_Labels(adj)
        
        # Remove hubs...
        if (dhubs) {
            foreach (labels; index; label) {
                # Delete vertex...
                if (degrees[index, 2] > avgdeg) {
                    # Search the vertex line...
                    dim_adj = dim(adj)
                    dim_i = dim_adj[0]
                    
                    # It must be redone every time, because the vertex position
                    # changes every time a node is deleted...
                    for (i = 1; i < dim_i; i = i + 1) {
                        if (adj[i, 0] == label) {
                            break
                        }
                    }
                    
                    # Log it...
                    fputs(index + "\n", fr)
                    
                    # Now delete vertex...
                    adj = delrow(adj, i)
                    adj = delcol(adj, i)
                }
            }
        }
        
        # Randomly remove vertices...
        if (drandom) {
            # Remove vertices...    
            lc = n - roundl(n * trandom)
            
            if (lc > n) {
                println("Error: number of vertices to left in file exceeds the total number of nodes.")
                exit(1)
            }
            
            mstay = matrix(0, n)
            
            println("Selecting " + (n - lc) + " vertices to remove...")
            
            while (lc > 0) {
                si = roundl(random() * (n - 1))
                if (!mstay[si]) {
                    mstay[si] = 1
                    lc = lc - 1
                }
            }
            
            foreach (labels; index; label) {
                # Delete vertex...
                if (!mstay[index]) {
                    # Search the vertex line...
                    dim_adj = dim(adj)
                    dim_i = dim_adj[0]
                    
                    # It must be redone every time, because the vertex position
                    # changes every time a node is deleted...
                    for (i = 1; i < dim_i; i = i + 1) {
                        if (adj[i, 0] == label) {
                            break
                        }
                    }
                    
                    # Log it...
                    fputs(index + "\n", fr)
                    
                    # Now delete vertex...
                    adj = delrow(adj, i)
                    adj = delcol(adj, i)
                }
            }
            
            mstay = NULL
        }
    # Relationship decrease mode...
    } else {
        if (drandom) {
            # Remove edges...
            narcs = count(adj, 1, 1, dim_i - 1, dim_j - 1)
            
            rmarcs = roundl(narcs * trandom)
            
            if (rmarcs > narcs) {
                println("Error: number of arcs to left in file exceeds the total number of arcs.")
                exit(1)
            }
            
            println("Selecting " + (rmarcs) + " arcs from " + narcs + " to remove...")
            
            while (rmarcs > 0) {
                # Delete arcs...
                arc_i = roundl(random() * (dim_i - 1))
                arc_j = roundl(random() * (dim_j - 1))
                
                if ((arc_i == 0) || (arc_j == 0)) {
                    continue
                }
                
                if (adj[arc_i, arc_j] != 0) {
                    # Log it...
                    fputs(arc_i + " " + arc_j + "\n", fr)
                    
                    # Now delete link...
                    adj[arc_i, arc_j] = 0
                    
                    # Decrease the number of arcs to remove...
                    rmarcs = rmarcs - 1
                }
            }
        }
    }
    
    # Close the report file...
    fclose(fr)
    
    # Save the network file...
    println("Saving file " + sprintf("%0" + length(toString(index_in)) + "." + length(toString(index_in)) + "d", nf) + "...")
    
    CNA_SaveFile(output_file, adj, output_file_type)
    
    # Get the current time...
    ts2 = time();
    
    # Show the elapsed time...
    printf("Elapsed time to generate this sample: %.3f seconds\n\n", ts2 - ts1)
    
    # Log the elapsed time...
    if (log_file != "noname") {
        fputs(sprintf("%d\t%.3f\n", nf, ts2 - ts1), fl)
    }
    
    if (trandom_step > 0) {
        trandom = trandom + trandom_step
    }
}

# Close the log file...
if (log_file != "noname") {
    fclose(fl)
}

# Get the current time...
t2 = time();

# Show the elapsed time...
printf("Elapsed time to generate %d samples: %.3f seconds\n\n", nfiles, t2 - t1)

