#!/usr/local/bin/guash
#
# pdb2netcsv.gua
#
#     This script creates a CSV network file from a protein database.
#
# Copyright (C) 2011 Roberto Luiz Souza Monteiro.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# RCS: @(#) $Id: pdb2netcsv.gua,v 1.0 2011/06/18 18:16:00 monteiro Exp $
#

#
# Configuration variables.
#
input_file = "noname"
output_file = "output.csv"
separator = ","
mdistance = 1.0
ca = FALSE

#
# Main program.
#
if (argc < 3) {
    println("Usage: pdb2netcsv option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: pdb2netcsv option1 value1 [option1 value1]")
        println("-h    --help    show the options sumary")
        println("-i              input file")
        println("-o              output file")
        println("-s              column separator(default=\",\")")
        println("-d              minimum distance between two atoms to conect them")
        println("      --ca      only measure distance from CA atoms")
        exit(0)
    } elseif (argv[i] == "-i") {
        i = i + 1
        input_file = argv[i]
    } elseif (argv[i] == "-o") {
        i = i + 1
        output_file = argv[i]
    } elseif (argv[i] == "-s") {
        i = i + 1
        separator = argv[i]
    } elseif (argv[i] == "-d") {
        i = i + 1
        mdistance = eval(argv[i])
    } elseif (argv[i] == "--ca") {
        ca = TRUE
    }
    i = i + 1
} 

# Check if the input file name was suplied.
if (input_file == "noname") {
    println("Error: input file name is mandatory.")
    exit(1)
}

# Generate the NetCSV file.
f1 = fopen(input_file, "r")
f2 = fopen(input_file, "r")
ft = fopen(output_file, "w")

if ((line1 = fgets(f1)) == NULL) { 
    f1 = fclose(f1)
    f2 = fclose(f2)
    ft = fclose(ft)
}

while (!feof(f1)) {
    if ((line1 = fgets(f1)) == NULL) { 
        break
    }

    record1 = split(line1)

    n1 = record1[1]
    atom1 = record1[2]
    
    x1 = eval(record1[6])
    y1 = eval(record1[7])
    z1 = eval(record1[8])

    line2 = fgets(f2)
    
    while (!feof(f2)) {
        if ((line2 = fgets(f2)) == NULL) { 
            break
        }

        record2 = split(line2)
        
        n2 = record2[1]
        atom2 = record2[2]
        
        x2 = eval(record2[6])
        y2 = eval(record2[7])
        z2 = eval(record2[8])
        
        if (ca == TRUE) {
            if ((n1 != n2) && (atom1 == "CA") && (atom2 == "CA")) {
                d = dist(x1, y1, z1, x2, y2, z2)

                if (d <= mdistance) {
                    if ((record1[0] + "-" + record1[1] + "-" + record1[2]) != (record2[0] + "-" + record2[1] + "-" + record2[2])) {
                        fputs("\"" + record1[0] + "-" + record1[1] + "-" + record1[2] + "\"" + separator + "\"" + record2[0] + "-" + record2[1] + "-" + record2[2] + "\"" + "\n", ft)
                    }
                }
            }
        } else {
            d = dist(x1, y1, z1, x2, y2, z2)

            if (d <= mdistance) {
                if ((record1[0] + "-" + record1[1] + "-" + record1[2]) != (record2[0] + "-" + record2[1] + "-" + record2[2])) {
                    fputs("\"" + record1[0] + "-" + record1[1] + "-" + record1[2] + "\"" + separator + "\"" + record2[0] + "-" + record2[1] + "-" + record2[2] + "\"" + "\n", ft)
                }
            }
        }
    }
    
    rewind(f2)
}

f1 = fclose(f1)
f2 = fclose(f2)
ft = fclose(ft)

