#!/usr/local/bin/guash
#
# calcaffinity.gua
#
#     This script calculates the affinity percentage between each pair of
#     vertices of a network.
#
# Copyright (C) 2011 Roberto Luiz Souza Monteiro.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# RCS: @(#) $Id: calcaffinity.gua,v 1.1 2012/04/12 14:54:00 monteiro Exp $
#

function CNA_SaveFile(filename, adj, type = "edges") {
    dim_adj = dim(adj)
    dim_i = dim_adj[0]
    dim_j = dim_adj[1]

    # Each line in a Pajek files must terminate with CR+LF.
    # Windows will automaticly converts "\n" to "\r\n", but
    # Linux will not.
    if ($SYS_HOST == "linux") {
        new_line = "\r\n"
    } else {
        new_line = "\n"
    }

    fp = fopen(filename, "w")

    # Save vertices...
    fputs("*Vertices " + (dim_i - 1) + new_line, fp)
    for (i = 1; i < dim_i; i = i + 1) {
        fputs(i + " \"" + adj[i, 0] + "\"" + new_line, fp)
    }

    # Save edges...
    if (type == "edges") {
        fputs("*Edges" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                if (adj[i, j] != 0) {
                    fputs(i + " " + j + " " + adj[i, j] + new_line, fp)
                }
            }
        }
    # Save arcs...
    } elseif (type == "arcs") {
        fputs("*Arcs" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                if (adj[i, j] != 0) {
                    fputs(i + " " + j + " " + adj[i, j] + new_line, fp)
                }
            }
        }
    # Save matrix...
    } elseif (type == "matrix") {
        fputs("*Matrix" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                fputs(" " + adj[i, j], fp)
            }
            fputs(new_line, fp)
        }
    }

    fp = fclose(fp)
}

function CNA_LoadFile(file_name) {
    fp = fopen(file_name, "r")

    file_section = "none"

    while (!feof(fp)) {
        if((line = fgets(fp)) == NULL) { 
            break
        }

        #record = split(trim(line, " \t\r\n"), " \t")
        record = split(trim(line, " \t\r\n"))

        if ((tolower(record[0]) == "*vertices") || (tolower(record[0]) == "*edges") || (tolower(record[0]) == "*arcs") || (tolower(record[0]) == "*matrix")) {
            file_section = tolower(record[0])
            if (file_section == "*vertices") {
                n = eval(record[1]) + 1
                adj = matrix(0, n, n)
            }
            i = 0
            continue
        }

        if (file_section == "*vertices") {
            adj[0, i + 1] = eval(record[1])
            adj[i + 1, 0] = eval(record[1])
            i = i + 1
        } elseif (file_section == "*edges") {
            i = eval(record[0])
            j = eval(record[1])
            if (length(record) == 2) {
                adj[i, j] = 1
                adj[j, i] = 1
            } else {
                adj[i, j] = eval(record[2])
                adj[j, i] = eval(record[2])
            }
        } elseif (file_section == "*arcs") {
            i = eval(record[0])
            j = eval(record[1])
            if (length(record) == 2) {
                adj[i, j] = 1
            } else {
                adj[i, j] = eval(record[2])
            }
        } elseif (file_section == "*matrix") {
            foreach(record; j; v) {
                adj[i + 1, j + 1] = eval(v)
                if (i == n) {
                    break
                }
            }
            i = i + 1
        }
    }

    fp = fclose(fp)

    return(adj)
}

#
# Configuration variables.
#
attribute_file = "noname"
network_file = "noname"
report_file = "output.rep"
exact = FALSE

#
# Main program.
#
if (argc < 3) {
    println("Usage: calcaffinity option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: calcaffinity option1 value1 [option1 value1]")
        println("-h    --help       show the options sumary")
        println("      --attfile    attribute Pajek file")
        println("      --netfile    network Pajek file")
        println("-r                 report file")
        println("-x                 genes must have exactly the same value so that there is affinity")
        exit(0)
    } elseif (argv[i] == "--attfile") {
        i = i + 1
        attribute_file = argv[i]
    } elseif (argv[i] == "--netfile") {
        i = i + 1
        network_file = argv[i]
    } elseif (argv[i] == "-r") {
        i = i + 1
        report_file = argv[i]
    } elseif (argv[i] == "-x") {
        exact = TRUE
    }
    i = i + 1
} 

# Check if the input file names were suplied.
if (attribute_file == "noname") {
    println("Error: attribute file name is mandatory.")
    exit(1)
}
if (network_file == "noname") {
    println("Error: network file name is mandatory.")
    exit(1)
}

# Load the network file.
adj1 = CNA_LoadFile(attribute_file)
adj2 = CNA_LoadFile(network_file)

dim_adj1 = dim(adj1)
dim_i = dim_adj1[0]
dim_j = dim_adj1[1]

# Calculate the affinity between two vertices and stores it inside the affinity matrix...
for (i = 1; i < dim_i; i = i + 1) {
    for (j = 1; j < dim_j; j = j + 1) {
        if (adj2[i, j] != 0) {
            if (i != j) {
                node1 = split(adj1[i, 0], ",")
                node2 = split(adj1[0, j], ",")
                
                nattributes = length(node1) - 1
                
                c = 0
                for (index = 1; index <= nattributes; index = index + 1) {
                    if (exact) {
                        if (node1[index] == node2[index]) {
                            c = c + 1
                        }
                    } else {
                        if ((node1[index] == 1) && (node2[index] == 1)) {
                            c = c + 1
                        }
                    }
                }
                
                affinity = (c * 1.0) / (nattributes * 1.0)
                adj1[i, j] = affinity
            }
        }
    }
}

# Calculate statistics...
sx = 0
sx2 = 0
n = 0

min_affinity = 0
max_affinity = 0

for (i = 1; i < dim_i; i = i + 1) {
    for (j = 1; j < dim_j; j = j + 1) {
        # Calculate the frequency distribution, the min, max and average affinity...
        if (adj2[i, j] != 0) {
            # Get the frequency distribution...
            try {
                freqdist[toString(adj1[i, j])] = freqdist[toString(adj1[i, j])] + 1
            } catch {
                freqdist[toString(adj1[i, j])] = 1
            }
            if (min_affinity == 0) {
                min_affinity = adj1[i, j]
            }
            if (max_affinity == 0) {
                max_affinity = adj1[i, j]
            }
            if (min_affinity > adj1[i, j]) {
                min_affinity = adj1[i, j]
            }
            if (max_affinity < adj1[i, j]) {
                max_affinity = adj1[i, j]
            }
            
            x = adj1[i, j]
            
            sx = sx + x
            sx2 = sx2 + x * x
            
            n = n + 1
        }
    }
}

# Calculate the percentage frequency distribution...
hist = matrix(0, length(freqdist), 3)
dim_hist = dim(hist)

i = 0
foreach(freqdist; v; f) {
    hist[i, 0] = eval(v)
    hist[i, 1] = f
	i = i + 1
}

sumfreqs = sum(hist, 0, 1, dim_hist[0] - 1, 1)

for (i = 0; i < dim_hist[0]; i = i + 1) {
    hist[i, 2] = (hist[i, 1] / (sumfreqs * 1.0)) * 100.0
}

# Sort the frequency distribution...
for (i = 0; i < dim_hist[0] - 1; i = i + 1) {
    for (j = i; j < dim_hist[0]; j = j + 1) {
        if (hist[i, 0] > hist[j, 0]) {
            v = hist[i, 0]
            hist[i, 0] = hist[j, 0]
            hist[j, 0] = v
            
            f = hist[i, 1]
            hist[i, 1] = hist[j, 1]
            hist[j, 1] = f
            
            p = hist[i, 2]
            hist[i, 2] = hist[j, 2]
            hist[j, 2] = p
        }
    }
}

avg_affinity = sx / n
deviation = sqrt((sx2 - (sx * sx) / n) / (n - 1))

# Save results...
fr = fopen(report_file, "w")

fputs("Min. affinity value: " + min_affinity + "\n", fr)
fputs("Avg. affinity value: " + avg_affinity + "\n", fr)
fputs("Max. affinity value: " + max_affinity + "\n", fr)
fputs("Deviation: " + deviation + "\n", fr)
fputs("Events: " + n + "\n", fr)
fputs("Exact: " + exact + "\n", fr)

fputs("Frequency distribution:\n", fr)

line = sprintf("%15s%15s%15s\n", "Value", "Frequency", "Frequency(%)")
fputs(line, fr)

for (i = 0; i < dim_hist[0]; i = i + 1) {
    line = sprintf("%15.3f%15.0f%15.3f\n", hist[i, 0], hist[i, 1], hist[i, 2])
    fputs(line, fr)
}

fr = fclose(fr)

