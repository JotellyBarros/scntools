#!/usr/local/bin/guash
#
# csvstat.gua
#
#     This script calculates the average of columns in a set of CSV files,
#     returning a CSV file containing the mean of each column of each file,
#     one file by row.
#
# Copyright (C) 2011 Roberto Luiz Souza Monteiro.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# RCS: @(#) $Id: csvstat.gua,v 1.0 2012/02/18 09:47:00 monteiro Exp $
#

#
# Configuration variables.
#
input_file = "noname"
average_file = "average.csv"
deviation_file = "deviation.csv"
error_file = "error.csv"
log_file = "noname"
prefix = "sample"
sufix = ""
nfiles = 1
index_from = 1
index_to = 1
index_in = 1
separator = ","
skipfirst = FALSE

#
# Main program.
#
if (argc < 3) {
    println("Usage: csvstat option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: csvstat option1 value1 [option1 value1]")
        println("-h    --help         show the options sumary")
        println("-l                   log file")
        println("      --oavg         average output file")
        println("      --odev         deviation output file")
        println("      --oerr         standard error output file")
        println("      --prefix       prefix for multiple file creation(default=\"sample\")")
        println("      --sufix        sufix for multiple file creation(default=\"\")")
        println("      --nfiles       number of files for multiple file creation")
        println("      --from         first file index for multiple file creation")
        println("      --to           last file index for multiple file creation")
        println("      --in           total number of files in the file set")
        println("      --separator    column separator(default=\",\")")
        println("      --skipfirst    first line to read(default=0)")
        
        exit(0)
    } elseif (argv[i] == "-l") {
        i = i + 1
        log_file = argv[i]
    } elseif (argv[i] == "--oavg") {
        i = i + 1
        average_file = argv[i]
    } elseif (argv[i] == "--odev") {
        i = i + 1
        deviation_file = argv[i]
    } elseif (argv[i] == "--oerr") {
        i = i + 1
        error_file = argv[i]
    } elseif (argv[i] == "--prefix") {
        i = i + 1
        prefix = argv[i]
    } elseif (argv[i] == "--sufix") {
        i = i + 1
        sufix = argv[i]
    } elseif (argv[i] == "--nfiles") {
        i = i + 1
        nfiles = eval(argv[i])
    } elseif (argv[i] == "--from") {
        i = i + 1
        index_from = eval(argv[i])
    } elseif (argv[i] == "--to") {
        i = i + 1
        index_to = eval(argv[i])
    } elseif (argv[i] == "--in") {
        i = i + 1
        index_in = eval(argv[i])
    } elseif (argv[i] == "--separator") {
        i = i + 1
        separator = argv[i]
    } elseif (argv[i] == "--skipfirst") {
        skipfirst = TRUE
    }
    i = i + 1
} 

# Get the current time...
t1 = time();

# Create the log file...
if (log_file != "noname") {
    fl = fopen(log_file, "w")
}

# Calculate the file index number range...
if (index_from < 1) {
    index_from = 1
}
if (index_to <= 1) {
    if (nfiles > 1) {
        index_to = index_from + nfiles - 1
    }
}
nfiles = index_to - index_from + 1
if (index_in <= 1) {
    index_in = nfiles
}

# Create the average and deviation files...
fa = fopen(average_file, "w")
fd = fopen(deviation_file, "w")
fe = fopen(error_file, "w")

println("Processing " + nfiles + " files...\n")

# Start file processing...
for (nf = index_from; nf <= index_to; nf = nf + 1) {
    # Get the current time...
    ts1 = time();
    
    if (nfiles > 1) {
        input_file = prefix + "-" + sprintf("%0" + length(toString(index_in)) + "." + length(toString(index_in)) + "d", nf) + sufix + ".csv"
    }
    
    println("Processing file " + input_file + "...")
    
    fp = fopen(input_file, "r")
    
    rows = 0
    ncols = 0
    
    while (!feof(fp)) {
        if ((line = fgets(fp)) == NULL) {
            break
        }
        
        rows = rows + 1
        
        if (rows == 1) {
            if (skipfirst) {
                continue
            }
        }
        
        if (separator != " ") {
            record = split(trim(line, " \t\n"), separator)
        } else {
            record = split(trim(line, " \t\n"))
        }
        
        if (!exists("fn")) {
            ncols = length(record)
            
            fsx = matrix(0, ncols)
            fsx2 = matrix(0, ncols)
            fn = matrix(0, ncols)
            
            foreach (record; column; value) {
                x = eval(value)
                
                fsx[column] = x
                fsx2[column] = x * x
                fn[column] = fn[column] + 1
            }
        } else {
            foreach (record; column; value) {
                x = eval(value)
                
                fsx[column] = fsx[column] + x
                fsx2[column] = fsx2[column] + x * x
                fn[column] = fn[column] + 1
            }
        }
    }
    
    fp = fclose(fp)
    
    if (ncols == 0) {
        continue
    }
    
    mavg = matrix(0, ncols)
    mdev = matrix(0, ncols)
    merr = matrix(0, ncols)
    
    # Calculate the averages and deviations...
    for (i = 0; i < ncols; i = i + 1) {
        mavg[i] = fsx[i] / (fn[i] * 1.0)
        
        if (fn[i] > 1) {
            mdev[i] = sqrt((fsx2[i] - (fsx[i] * fsx[i]) / (fn[i] * 1.0)) / ((fn[i] * 1.0) - 1))
            merr[i] = mdev[i] / sqrt(fn[i])
        }
    }
    
    # Write data...
    fputs(trim(toString(mavg), "[]") + "\n", fa)
    fputs(trim(toString(mdev), "[]") + "\n", fd)
    fputs(trim(toString(merr), "[]") + "\n", fe)
    
    # Destroy the used matrices...
    fsx = NULL
    fsx2 = NULL
    fn = NULL
    mavg = NULL
    mdev = NULL
    
    # Get the current time...
    ts2 = time();
    
    # Show the elapsed time...
    printf("Elapsed time to process this file: %.3f seconds\n\n", ts2 - ts1)
    
    # Log the elapsed time...
    if (log_file != "noname") {
        fputs(sprintf("%d\t%.3f\n", nf, ts2 - ts1), fl)
    }
}

# Close the log file...
if (log_file != "noname") {
    fclose(fl)
}

fclose(fa)
fclose(fd)
fclose(fe)

# Get the current time...
t2 = time();

# Show the elapsed time...
printf("Elapsed time to process %d files: %.3f seconds\n\n", nfiles, t2 - t1)

