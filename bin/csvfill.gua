#!/usr/local/bin/guash
#
# csvfill.gua
#
#     This script fills a CSV file with the last file's row.
#
# Copyright (C) 2011 Roberto Luiz Souza Monteiro.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# RCS: @(#) $Id: csvfill.gua,v 1.0 2014/08/08 11:19:00 monteiro Exp $
#

#
# Configuration variables.
#
input_file = "noname"
output_file = "noname"
log_file = "noname"
prefix = "sample"
output_prefix = "sample"
sufix = ""
nfiles = 1
index_from = 1
index_to = 1
index_in = 1
separator = ","
first_line = 0
last_line = -1
first_column = 0
nlines = -1
add_row_counter = FALSE
fill_to = -1

#
# Main program.
#
if (argc < 3) {
    println("Usage: csvfill option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: csvfill option1 value1 [option1 value1]")
        println("-h    --help         show the options sumary")
        println("-i                   input file")
        println("-o                   output file")
        println("-l                   log file")
        println("      --prefix       prefix for multiple file creation(default=\"sample\")")
        println("      --sufix        sufix for multiple file creation(default=\"\")")
        println("      --oprefix      output prefix for multiple file creation(default=\"sample\")")
        println("      --nfiles       number of files for multiple file creation")
        println("      --from         first file index for multiple file creation")
        println("      --to           last file index for multiple file creation")
        println("      --in           total number of files in the file set")
        println("      --separator    column separator(default=\",\")")
        println("      --first        first line to read(default=0)")
        println("      --last         last line to read")
        println("      --firstcol     first column to keep on the result file(default=0)")
        println("-n                   number of lines to read")
        println("-c                   add row counter to the first column")
        println("      --fillto       adds new lines until the specified number of lines is reached")
        
        exit(0)
    } elseif (argv[i] == "-i") {
        i = i + 1
        input_file = argv[i]
    } elseif (argv[i] == "-o") {
        i = i + 1
        output_file = argv[i]
    } elseif (argv[i] == "-l") {
        i = i + 1
        log_file = argv[i]
    } elseif (argv[i] == "--prefix") {
        i = i + 1
        prefix = argv[i]
    } elseif (argv[i] == "--oprefix") {
        i = i + 1
        output_prefix = argv[i]
    } elseif (argv[i] == "--sufix") {
        i = i + 1
        sufix = argv[i]
    } elseif (argv[i] == "--nfiles") {
        i = i + 1
        nfiles = eval(argv[i])
    } elseif (argv[i] == "--from") {
        i = i + 1
        index_from = eval(argv[i])
    } elseif (argv[i] == "--to") {
        i = i + 1
        index_to = eval(argv[i])
    } elseif (argv[i] == "--in") {
        i = i + 1
        index_in = eval(argv[i])
    } elseif (argv[i] == "--separator") {
        i = i + 1
        separator = argv[i]
    } elseif (argv[i] == "--first") {
        i = i + 1
        first_line = eval(argv[i])
    } elseif (argv[i] == "--last") {
        i = i + 1
        last_line = eval(argv[i])
    } elseif (argv[i] == "--firstcol") {
        i = i + 1
        first_column = eval(argv[i])
    } elseif (argv[i] == "-n") {
        i = i + 1
        nlines = eval(argv[i])
    } elseif (argv[i] == "-c") {
        add_row_counter = TRUE
    } elseif (argv[i] == "--fillto") {
        i = i + 1
        fill_to = eval(argv[i])
    }
    i = i + 1
} 

# Get the current time...
t1 = time();

# Create the log file...
if (log_file != "noname") {
    fl = fopen(log_file, "w")
}

# Calculate the file index number range...
if (index_from < 1) {
    index_from = 1
}
if (index_to <= 1) {
    if (nfiles > 1) {
        index_to = index_from + nfiles - 1
    }
}
nfiles = index_to - index_from + 1
if (index_in <= 1) {
    index_in = nfiles
}

# Calculate the line number range...
if (first_line < 0) {
    first_line = 0
}
if (last_line < 0) {
    if (nlines > 1) {
        last = first_line + nlines - 1
    }
}
if (last_line > -1) {
    nlines = last_line - first_line + 1
}

println("Processing " + nfiles + " files...\n")

# Start file processing...
for (nf = index_from; nf <= index_to; nf = nf + 1) {
    # Get the current time...
    ts1 = time();
    
    if (nfiles > 1) {
        input_file = prefix + "-" + sprintf("%0" + length(toString(index_in)) + "." + length(toString(index_in)) + "d", nf) + sufix + ".csv"
        output_file = output_prefix + "-" + sprintf("%0" + length(toString(index_in)) + "." + length(toString(index_in)) + "d", nf) + sufix + ".csv"
    }
    
    println("Processing file " + input_file + "...")
    
    try {
        fp = fopen(input_file, "r")
        fo = fopen(output_file, "w")
        
        row = 0
        
        while (!feof(fp)) {
            if ((line = fgets(fp)) == NULL) {
                break
            }
            
            if (separator != " ") {
                record = split(trim(line, " \t\n"), separator)
            } else {
                record = split(trim(line, " \t\n"))
            }
            
            if (row >= first_line) {
                if (nlines >= 1) {
                    if (row < nlines) {
                        if (add_row_counter) {
                            output_line = (row + 1) + separator
                            foreach (record; k; v) {
                                if (k >= first_column) {
                                    output_line = output_line + record[k] + separator
                                }
                            }
                            output_line = trim(output_line, separator) + "\n"
                        } else {
                            output_line = ""
                            foreach (record; k; v) {
                                if (k >= first_column) {
                                    output_line = output_line + record[k] + separator
                                }
                            }
                            output_line = trim(output_line, separator) + "\n"
                        }
                        fputs(output_line, fo)
                    }
                } else {
                    if (add_row_counter) {
                        output_line = (row + 1) + separator
                        foreach (record; k; v) {
                            if (k >= first_column) {
                                output_line = output_line + record[k] + separator
                            }
                        }
                        output_line = trim(output_line, separator) + "\n"
                    } else {
                        output_line = ""
                        foreach (record; k; v) {
                            if (k >= first_column) {
                                output_line = output_line + record[k] + separator
                            }
                        }
                        output_line = trim(output_line, separator) + "\n"
                    }
                    fputs(output_line, fo)
                }
            }
            
            row = row + 1
        }
        
        if (row < fill_to) {
            row = row + 1
            
            for (i = row; i <= fill_to; i = i + 1) {
                if (add_row_counter) {
                    output_line = (i) + separator
                    foreach (record; k; v) {
                        if (k >= first_column) {
                            output_line = output_line + record[k] + separator
                        }
                    }
                    output_line = trim(output_line, separator) + "\n"
                } else {
                    output_line = ""
                    foreach (record; k; v) {
                        if (k >= first_column) {
                            output_line = output_line + record[k] + separator
                        }
                    }
                    output_line = trim(output_line, separator) + "\n"
                }
                fputs(output_line, fo)
            }
        }
        
        fp = fclose(fp)
        fo = fclose(fo)
    }
    
    # Get the current time...
    ts2 = time();
    
    # Show the elapsed time...
    printf("Elapsed time to process this file: %.3f seconds\n\n", ts2 - ts1)
    
    # Log the elapsed time...
    if (log_file != "noname") {
        fputs(sprintf("%d\t%.3f\n", nf, ts2 - ts1), fl)
    }
}

# Close the log file...
if (log_file != "noname") {
    fclose(fl)
}

# Get the current time...
t2 = time();

# Show the elapsed time...
printf("Elapsed time to process %d files: %.3f seconds\n\n", nfiles, t2 - t1)

