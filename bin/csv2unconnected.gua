#!/usr/local/bin/guash
#
# csv2unconnected.gua
#
#     This script creates an unconnected Pajek network file from a CSV network file.
#
# Copyright (C) 2011 Roberto Luiz Souza Monteiro.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# RCS: @(#) $Id: csv2unconnected.gua,v 1.1 2012/02/13 12:50:00 monteiro Exp $
#

function CNA_SaveFile(filename, adj, type = "edges") {
    dim_adj = dim(adj)
    dim_i = dim_adj[0]
    dim_j = dim_adj[1]

    # Each line in a Pajek files must terminate with CR+LF.
    # Windows will automaticly converts "\n" to "\r\n", but
    # Linux will not.
    if ($SYS_HOST == "linux") {
        new_line = "\r\n"
    } else {
        new_line = "\n"
    }

    fp = fopen(filename, "w")

    # Save vertices...
    fputs("*Vertices " + (dim_i - 1) + new_line, fp)
    for (i = 1; i < dim_i; i = i + 1) {
        fputs(i + " \"" + adj[i, 0] + "\"" + new_line, fp)
    }

    # Save edges...
    if (type == "edges") {
        fputs("*Edges" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                if (adj[i, j] != 0) {
                    fputs(i + " " + j + " " + adj[i, j] + new_line, fp)
                }
            }
        }
    # Save arcs...
    } elseif (type == "arcs") {
        fputs("*Arcs" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                if (adj[i, j] != 0) {
                    fputs(i + " " + j + " " + adj[i, j] + new_line, fp)
                }
            }
        }
    # Save matrix...
    } elseif (type == "matrix") {
        fputs("*Matrix" + new_line, fp)
        for (i = 1; i < dim_i; i = i + 1) {
            for (j = 1; j < dim_j; j = j + 1) {
                fputs(" " + adj[i, j], fp)
            }
            fputs(new_line, fp)
        }
    }

    fp = fclose(fp)
}

#
# Configuration variables.
#
input_file = "noname"
output_file = "output.net"
output_file_type = "edges"
separator = ","
ignore = "NULL"

#
# Main program.
#
if (argc < 3) {
    println("Usage: csv2unconnected option1 value1 [option1 value1]")
    exit
}

i = 2

while (i < argc) {
    if ((argv[i] == "-h") || (argv[i] == "--help")) {
        println("Usage: csv2unconnected option1 value1 [option1 value1]")
        println("-h    --help         show the options sumary")
        println("-i                   input file")
        println("-o                   output file")
        println("-t                   output file type(default=edges)")
        println("      --separator    column separator(default=\",\")")
        println("      --ignore       ignore fields with the specified patern(default=NULL)")
        exit(0)
    } elseif (argv[i] == "-i") {
        i = i + 1
        input_file = argv[i]
    } elseif (argv[i] == "-o") {
        i = i + 1
        output_file = argv[i]
    } elseif (argv[i] == "-t") {
        i = i + 1
        output_file_type = argv[i]
    } elseif (argv[i] == "--separator") {
        i = i + 1
        separator = argv[i]
    } elseif (argv[i] == "--ignore") {
        i = i + 1
        ignore = argv[i]
    }
    i = i + 1
} 

# Check if the input file name was suplied.
if (input_file == "noname") {
    println("Error: input file name is mandatory.")
    exit(1)
}

# Get vertices...
fp = fopen(input_file, "r")

n = 0

while (!feof(fp)) {
    if ((line = fgets(fp)) == NULL) { 
        break
    }

    record = split(trim(line, " \t\n"), separator)
    
    column1 = eval(record[0])
    column2 = eval(record[1])

    if (column1 != ignore) {
        if (exists("vertex")) {
            if (search(keys(vertex), column1) == NULL) {
                n = n + 1
                vertex[column1] = n
            }
        } else {
            n = n + 1
            vertex[column1] = n
        }
    }
    if (column2 != ignore) {
        if (exists("vertex")) {
            if (search(keys(vertex), column2) == NULL) {
                n = n + 1
                vertex[column2] = n
            }
        } else {
            n = n + 1
            vertex[column2] = n
        }
    }
}

fp = fclose(fp)

nvertices = length(vertex)
adj = matrix(0, nvertices + 1, nvertices + 1)

foreach (vertex; n; v) {
    adj[0, v] = n
    adj[v, 0] = n    
}

CNA_SaveFile(output_file, adj, output_file_type)

exit(0)

